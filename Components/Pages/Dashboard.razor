@page "/"

@using Microsoft.AspNetCore.Components.Authorization
@using SVGLClub.Data
@using SVGLClub.Data.Services
@using SVGLClub.Components.Layout
@using SVGLClub.Components
@using MudBlazor
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISessionSyncService SessionSyncService
@inject IContentLoader ContentLoader
@inject IQueryService QueryService

@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

<MudContainer>
	<MudContainer Class="my-4">
		<MudText Typo="Typo.h2">Dashboard</MudText>
	</MudContainer>
		
	
	@if (!_pageLoaded)
	{
		<MudContainer Class="my-4">
			<MudProgressCircular Indeterminate=true />
			<MudText Typo="Typo.h6">Loading...</MudText>
		</MudContainer>
	}
	else
	{
		<CascadingAuthenticationState>
			<AuthorizeView>
			@if (_lapCount > 0)
			{
				<MudPaper Outlined="true" Class="mud-theme-dark pa-4 my-4">
					<MudText Typo="Typo.h6" Class="pb-4"> @($"{context.User.Identity!.Name}'s Stats")</MudText>
					<UserDashboard FavoriteCar="@_favoriteCar" LapCount="@_lapCount" FavoriteTrack="@_favoriteTrack" />
				</MudPaper>
			}
			</AuthorizeView>
		</CascadingAuthenticationState>

		<MudPaper Outlined="true" Class="mud-theme-dark pa-4 my-4">
			<MudText Typo="Typo.h6" Class="pb-4">Recent Sessions</MudText>
			<SessionTable Sessions="@_sessions"/>
		</MudPaper>
	}

</MudContainer>

@code {
	private bool _pageLoaded = false;
	private List<AssettoSession> _sessions { get; set; } = null!;
	private string? _favoriteCar, _favoriteTrack;
	private int _lapCount;

	protected override async Task OnInitializedAsync()
	{
		await SessionSyncService.UpdateSessionsAsync();
		_sessions = await QueryService.QuerySessions();
		await ContentLoader.GetNamesAsync(_sessions);

		var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = auth.User;
		if (user.Identity?.IsAuthenticated == true)
		{
			var raw = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
			var steamId = raw?.Split('/').Last();
			if (!string.IsNullOrEmpty(steamId))
			{
				_favoriteCar = await QueryService.GetFavoriteCarByDriverAsync(steamId);
				_lapCount = await QueryService.GetLapCountByDriverAsync(steamId);
				_favoriteTrack = await QueryService.GetFavoriteTrackByDriverAsync(steamId);
			}
		}

		_pageLoaded = true;
		StateHasChanged();
	}
}