@using MudBlazor
@using ApexCharts
@using SVGLClub.Data
@using System.Text.Json

@rendermode InteractiveServer

@if (Entry1 is null && Entry2 is null)
{
	<MudText Typo="Typo.body2" Class="mt-4">Select two laps above and click "Show Charts" to compare.</MudText>
}
else
{
	<MudStack Class="mt-4">
		<MudContainer>
			<MudText Typo="Typo.subtitle2">Speed (km/h)</MudText>
			<ApexChart TItem="DataPoint" Height="250" Options="_speedOptions" XAxisType="XAxisType.Numeric">
				@if (Entry1 != null)
				{
					<ApexPointSeries TItem="DataPoint"
									 Items="@(GetPoints<float>(Entry1.SpeedJson, 1.0, _chartScale))"
									 Name="@($"{Entry1.Driver} - {Entry1.Car}")"
									 XValue="p => p.X"
									 YValue="p => (decimal)p.Y" />
				}
				@if (Entry2 != null)
				{
					<ApexPointSeries TItem="DataPoint"
									 Items="@(GetPoints<float>(Entry2.SpeedJson, 1.0, _chartScale))"
									 Name="@($"{Entry2.Driver} - {Entry2.Car}")"
									 XValue="p => p.X"
									 YValue="p => (decimal)p.Y" />
				}
			</ApexChart>
		</MudContainer>
		<MudContainer>
			<MudText Typo="Typo.subtitle2">Throttle (%)</MudText>
			<ApexChart TItem="DataPoint" Height="250" Options="_throttleOptions" XAxisType="XAxisType.Numeric">
				@if (Entry1 != null)
				{
					<ApexPointSeries TItem="DataPoint"
									 Items="@(GetPoints<float>(Entry1.ThrottleJson, 1.0, _chartScale))"
									 Name="@($"{Entry1.Driver} - {Entry1.Car}")"
									 XValue="p => p.X"
									 YValue="p => (decimal)p.Y" />
				}
				@if (Entry2 != null)
				{
					<ApexPointSeries TItem="DataPoint"
									 Items="@(GetPoints<float>(Entry2.ThrottleJson, 1.0, _chartScale))"
									 Name="@($"{Entry2.Driver} - {Entry2.Car}")"
									 XValue="p => p.X"
									 YValue="p => (decimal)p.Y" />
				}
			</ApexChart>
		</MudContainer>
		<MudContainer>
			<MudText Typo="Typo.subtitle2">Brake (%)</MudText>
			<ApexChart TItem="DataPoint" Height="250" Options="_brakeOptions" XAxisType="XAxisType.Numeric">
				@if (Entry1 != null)
				{
					<ApexPointSeries TItem="DataPoint"
									 Items="@(GetPoints<float>(Entry1.BrakeJson, 1.0, _chartScale))"
									 Name="@($"{Entry1.Driver} - {Entry1.Car}")"
									 XValue="p => p.X"
									 YValue="p => (decimal)p.Y" />
				}
				@if (Entry2 != null)
				{
					<ApexPointSeries TItem="DataPoint"
									 Items="@(GetPoints<float>(Entry2.BrakeJson, 1.0, _chartScale))"
									 Name="@($"{Entry2.Driver} - {Entry2.Car}")"
									 XValue="p => p.X"
									 YValue="p => (decimal)p.Y" />
				}
			</ApexChart>
		</MudContainer>
		<MudContainer>
			<MudText Typo="Typo.subtitle2">Gear</MudText>
			<ApexChart TItem="DataPoint" Height="250" Options="_gearOptions" XAxisType="XAxisType.Numeric">
				@if (Entry1 != null)
				{
					<ApexPointSeries TItem="DataPoint"
									 Items="@(GetPoints<float>(Entry1.GearJson, 1.0, _chartScale))"
									 Name="@($"{Entry1.Driver} - {Entry1.Car}")"
									 XValue="p => p.X"
									 YValue="p => (decimal)p.Y" />
				}
				@if (Entry2 != null)
				{
					<ApexPointSeries TItem="DataPoint"
									 Items="@(GetPoints<int>(Entry2.GearJson, 1.0, _chartScale))"
									 Name="@($"{Entry2.Driver} - {Entry2.Car}")"
									 XValue="p => p.X"
									 YValue="p => (decimal)p.Y" />
				}
			</ApexChart>
		</MudContainer>
	</MudStack>
}

@code {
	[Parameter] public TelemetryEntry? Entry1 { get; set; }
	[Parameter] public TelemetryEntry? Entry2 { get; set; }
	[Parameter] public List<TrackSectionPoint> TrackSections { get; set; } = new();

	private int _chartScale = 2;
	private ApexChartOptions<DataPoint> _speedOptions = new();
	private ApexChartOptions<DataPoint> _throttleOptions = new();
	private ApexChartOptions<DataPoint> _brakeOptions = new();
	private ApexChartOptions<DataPoint> _gearOptions = new();

	protected override void OnInitialized()
	{
		_speedOptions = CreateOptions("speedChart");
		_throttleOptions = CreateOptions("throttleChart");
		_brakeOptions = CreateOptions("brakeChart");
		_gearOptions = CreateOptions("gearChart");

		_speedOptions.Yaxis = new List<YAxis> 
		{ 
			new YAxis 
			{ 
				Labels = new YAxisLabels 
				{ 
					Formatter = @"function(value) { return value === undefined ? '' : Math.round(value).toString(); }" 
				}, 

				Title = new AxisTitle { Text = "km/h" } 
			} 
		};

		_throttleOptions.Yaxis = new List<YAxis> 
		{ 
			new YAxis 
			{ 
				Labels = new YAxisLabels 
				{ 
					Formatter = @" function(val) { if (val === undefined) return ''; return (val * 100).toFixed(1) + '%'; }"
				}, 

				Title = new AxisTitle { Text = "%" } 
			} 
		};

		_brakeOptions.Yaxis = new List<YAxis> 
		{ 
			new YAxis 
			{ 
				Labels = new YAxisLabels 
				{ 
					Formatter = @" function(val) { if (val === undefined) return ''; return (val * 100).toFixed(1) + '%'; }"
				}, 

				Title = new AxisTitle { Text = "%" } 
			} 
		};

		_gearOptions.Yaxis = new List<YAxis> 
		{ 
			new YAxis 
			{ 
				Labels = new YAxisLabels 
				{ 
					Formatter = @"function(value) { return value === undefined ? '' : Math.trunc(value).toString(); }"
				}, 

				Title = new AxisTitle { Text = "Gear" } 
			} 
		};
	}

	public class DataPoint
	{
		public int X { get; set; }
		public double Y { get; set; }
	}

	private List<DataPoint> GetPoints<T>(string json, double scale, int step = 1) 
	{
		var list = JsonSerializer.Deserialize<List<T>>(json) ?? new List<T>();

		return list
			.Where((_, i) => i % step == 0)
			.Select((v, i) => new DataPoint{
				X = i,
				Y = Convert.ToDouble(v) * scale
			})
			.ToList();
	}

	private ApexChartOptions<DataPoint> CreateOptions(string chartId) => new ApexChartOptions<DataPoint>
		{
			Chart = new Chart 
			{ 
				Id = chartId, 
				Group="TelemetryGroup", 
				Type = ApexCharts.ChartType.Line, 
				Toolbar = new Toolbar { AutoSelected = AutoSelected.Zoom, Tools = new Tools { Download = false } }, 
				Animations = new Animations { Speed = 1000 }, 
				Zoom = new Zoom { Enabled = true, AllowMouseWheelZoom = false }
			},
			Stroke = new Stroke { Curve = Curve.Straight, Width = 1 },
			Markers = new Markers { Size = 0, Hover = new MarkersHover { Size = 0 } },
			Colors = new List<string> { "var(--mud-palette-tertiary)", "var(--mud-palette-secondary)" },
			Fill = new Fill { Opacity = 0.8 },
			Grid = new Grid { Show = false, BorderColor = "rgba(255, 255, 255, 0.1)"},
			Tooltip = new Tooltip { Enabled = false },
			Xaxis = new XAxis { Labels = new XAxisLabels { Show = false }, AxisBorder = new AxisBorder { Show = false }, AxisTicks = new AxisTicks { Show = false } },
			Annotations = new Annotations { Xaxis = GetSectionAnnotations() }
		};

	private string FormatStyle(string chartId)
	{
		switch(chartId)
		{
			case "speedChart":
				return @" function(val) { if (val === undefined) return ''; return Math.round(val) + ' km/h'; }";
			case "throttleChart":
			case "brakeChart":
				return @" function(val) { if (val === undefined) return ''; return (val * 100).toFixed(1) + '%'; }";
			case "gearChart":
				return @" function(val) { if (val === undefined) return ''; return Math.trunc(val).toString(); }";
			default: return "";
		}

	}

	private List<AnnotationsXAxis> GetSectionAnnotations()
	{
		var samples = GetPoints<int>(Entry1!.GearJson, 1.0, _chartScale).Count();
		var xaxis = new List<AnnotationsXAxis>();

		foreach (var section in TrackSections)
		{
			var point = new AnnotationsXAxis
			{
				X = section.In * samples,
				X2 = section.Out * samples,
				Label = new Label { Text = section.Label },
				Opacity = 0.1
			};

			xaxis.Add(point);
		}

		return xaxis;
	}
}
