@using MudBlazor
@using SVGLClub.Data
@using SVGLClub.Data.Services

@inject IContentLoader ContentLoader
@inject IQueryService QueryService

<MudExpansionPanels MultiExpansion="true" Class="mud-width-full" Elevation="1">
	@{
		var sorted = Sessions.OrderByDescending(s => s.SessionDate).ToList();
		var iterations = DisplayAmount > 0 ? sorted.Take(DisplayAmount) : sorted;
	}

	@foreach (var session in iterations)
	{
		<MudExpansionPanel Expanded="false">
			<TitleContent>
				<MudStack Row="true" Spacing="4" AlignItems="AlignItems.Center" Class="mud-width-half">
					<MudChip 
						Style="width: 100px; text-align: center; white-space: nowrap;" 
						Class="mr-4" T="string" 
						Size="Size.Small" 
						Color="@GetSessionChipColor(session.SessionType)">@session.SessionType</MudChip>
					<MudText Style="text-align:left;" Typo="Typo.subtitle2">@($"{ContentLoader.GetDisplayName(session.TrackName + "|" + session.TrackConfig)}")</MudText>
					<MudText>-</MudText>
					<MudText Style="text-align:left;" Typo="Typo.subtitle2">@($"{session.SessionDate.ToLocalTime().ToString("MMM d, yyyy h:mm tt")}")</MudText>
				</MudStack>
			</TitleContent>
			<ChildContent>
				@{
					var results = session.Results?
						.Where(r => r.BestLap != 999999999 && r.TotalTime != 0)
						.ToList() ?? new List<SessionResult>();
				}
				<MudTable T="SessionResult"
						Items="results"
						Dense="true"
						Hover="true"
						Elevation="4"
						RowClass="cursor-pointer"
						Style="background-color:var(--mud-palette-skeleton)"
						OnRowClick="@( (TableRowClickEventArgs<SessionResult> e) => 
						{
							if (e.Item is null) { return; }
							ToggleLaps(session.Id, e.Item!.DriverGuid, e.Item.CarModel);
						})">
					<HeaderContent>
						<MudTh>Pos</MudTh>
						<MudTh>Driver</MudTh>
						<MudTh>Car</MudTh>
						<MudTh Style="text-align: right;">Best Lap</MudTh>
						<MudTh Style="text-align: right;">Optimal</MudTh>
						<MudTh Style="text-align: right;">Total Time</MudTh>
					</HeaderContent>

					<RowTemplate Context="result">
						<MudTd DataLabel="Pos">@(results.IndexOf(result) + 1)</MudTd>
						<MudTd DataLabel="Driver">@result.DriverName</MudTd>
						<MudTd DataLabel="Car">@ContentLoader.GetDisplayName(result.CarModel)</MudTd>
						<MudTd Style="text-align: right;" DataLabel="Best Lap">@Util.FormatTime(TimeSpan.FromMilliseconds(result.BestLap))</MudTd>
						<MudTd Style="text-align: right;" DataLabel="Optimal">@Util.FormatTime(TimeSpan.FromMilliseconds(GetOptimalLap(session, result.DriverGuid, result.CarModel)))</MudTd>
						<MudTd Style="text-align: right;" DataLabel="Total Time">@Util.FormatTime(TimeSpan.FromMilliseconds(result.TotalTime))</MudTd>
					</RowTemplate>

					<ChildRowContent>
						@if (IsExpanded(session.Id, context.DriverGuid, context.CarModel))
						{
							<MudTr>
								<MudTd ColSpan="6" Class="pa-4">
									<LapsTable Laps="@session.Laps!.Where(l => l.DriverGuid == context.DriverGuid && l.CarModel == context.CarModel).ToList()" />
								</MudTd>
							</MudTr>
						}
					</ChildRowContent>
				</MudTable>
			</ChildContent>
		</MudExpansionPanel>
	}
</MudExpansionPanels>

@code {
	[Parameter] public List<AssettoSession> Sessions { get; set; } = null!;
	[Parameter] public int DisplayAmount { get; set; } = 0;

	private HashSet<(int sessionId, string driverGuid, string car)> _expanded = new();

	private Color GetSessionChipColor(string type) => type.ToUpperInvariant() switch
	{
		"PRACTICE" => Color.Default,
		"QUALIFY" => Color.Primary,
		"RACE" => Color.Success,
		_ => Color.Default
	};

	private long GetOptimalLap(AssettoSession session, string driverGuid, string car)
	{
		var laps = session.Laps?
			.Where(l => l.DriverGuid == driverGuid && l.CarModel == car && l.Cuts == 0)
			.ToList() ?? new List<SessionLap>();

		var bestS1 = laps.Min(l => l.Sector1);
		var bestS2 = laps.Min(l => l.Sector2);
		var bestS3 = laps.Min(l => l.Sector3);

		return bestS1 + bestS2 + bestS3;
	}

	private void ToggleLaps(int sessionId, string driverGuid, string car)
	{
		var key = (sessionId, driverGuid, car);

		if (!_expanded.Remove(key)) { _expanded.Add(key); }
	}

	private bool IsExpanded(int sessionId, string driverGuid, string car) => _expanded.Contains((sessionId, driverGuid, car));
}
